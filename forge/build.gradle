plugins {
    id("net.minecraftforge.gradle")
    id("org.spongepowered.mixin")
    id("org.parchmentmc.librarian.forgegradle") version("${forge_mappings_channel_plugin_version}")
    id("me.modmuss50.mod-publish-plugin") version("${publisher_plugin_version}")
}
configurations {
    implementation.extendsFrom shadow
}

base {
    archivesName = "${mod_name}-${minecraft_version}-forge"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
    config("${mod_id}-core.mixins.json")
    project(":modules").subprojects.stream()
            .forEach { commonProj -> config("${mod_id}-${commonProj.name}.mixins.json")}
}

minecraft {
    mappings channel: "${forge_mappings_channel}", version: "${forge_mappings_channel_version}"

    copyIdeResources = true

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            taskName "${forge_client_taskname}"

            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                    source project(":core").sourceSets.main
                    project(":modules").subprojects.stream()
                            .forEach { commonProj -> source commonProj.sourceSets.main}
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            taskName "${forge_server_taskname}"

            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                    source project(":core").sourceSets.main
                    project(":modules").subprojects.stream()
                            .forEach { moduleProj -> source moduleProj.sourceSets.main}
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            taskName "${forge_data_taskname}"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args "--mod", mod_id, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    // Base
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    compileOnly project(":core")
    compileOnly project(":common")
    project(":modules").subprojects.stream()
            .forEach { commonProj -> compileOnly commonProj}

    shadow(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))

    // Dependencies (Optional)
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${forge_jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${forge_jei_version}")

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${forge_jei_version}")

    implementation fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:${forge_jeed_version}")

    implementation fg.deobf("curse.maven:catalogue-459701:${forge_catalogue_version}")
    implementation fg.deobf("curse.maven:gamemenumodoption-353051:${forge_gmmo_version}")

    implementation fg.deobf("curse.maven:jade-324717:${forge_jade_version}")

    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:${forge_appleskin_version}:api")
    runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:${forge_appleskin_version}")

    implementation fg.deobf("mysticdrew:common-networking-forge:${common_networking_version}")
}

tasks.withType(JavaCompile).configureEach { source(project(":common").sourceSets.main.allSource) }
tasks.withType(JavaCompile).configureEach { source(project(":core").sourceSets.main.allSource) }
tasks.withType(JavaCompile).configureEach { project(":modules").subprojects.stream().forEach{ moduleProj -> source(moduleProj.sourceSets.main.allSource)} }
tasks.withType(Javadoc).configureEach { source(project(":common").sourceSets.main.allJava) }
tasks.withType(Javadoc).configureEach { source(project(":core").sourceSets.main.allJava) }
tasks.withType(Javadoc).configureEach { project(":modules").subprojects.stream().forEach{ moduleProj -> source(moduleProj.sourceSets.main.allJava)} }
tasks.named("sourcesJar", Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(project(":common").sourceSets.main.allSource)
    from(project(":core").sourceSets.main.allSource)
    project(":modules").subprojects.stream().forEach{ moduleProj -> from(moduleProj.sourceSets.main.allSource)}
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(":common").sourceSets.main.resources
    from project(":core").sourceSets.main.resources
    project(":modules").subprojects.stream().forEach{ moduleProj -> from moduleProj.sourceSets.main.resources}
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = base.archivesName.get()
            version = mod_version

            artifact jar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

publishMods {
    file = jar.archiveFile
    changelog = file("CHANGELOG.md").getText()
    version = "${minecraft_version}-${mod_version}"
    displayName = "${mod_name} v${minecraft_version}-${mod_version}"
    type = STABLE

    modLoaders.add("forge")

    curseforge {
        projectId = ""
        projectSlug = "infamous_libraries"
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        announcementTitle = "New Infamous Libraries CurseForge Release"

        getMinecraftVersions().add(minecraft_version)
    }

    modrinth {
        projectId = ""
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        announcementTitle = "New Infamous Libraries Modrinth Release"

        getMinecraftVersions().add(minecraft_version)
    }
}